//////////////////////////////////////
//蒙皮修型绑定工具
//该工具原始代码，来源与外国网站，老船工作室对其进行修改、汉化，方便使用
//本工具仅供学习研究和个人创作使用，未经本站授权请勿商用！
//转载请注明出处<Animate8.com>！谢谢支持O(∩_∩)O~
//赋予角色生命，演绎梦想故事。
//更多精彩内容请关注<老船@动画吧>！
//网址：www.animate8.com
//QQ：149090900
//QQ群：130930540
//新浪微博：老船动画吧
////////////////////////////////////
global proc gtcgTkShapeBuilder ()
{
	if (`window -q -ex shapeBuilderWindow`) deleteUI shapeBuilderWindow;
		if (`windowPref -q -ex shapeBuilderWindow`) windowPref -r  shapeBuilderWindow;

	window -w 280 -h 280 -title "老船角色绑定☆蒙皮修型绑定工具！" shapeBuilderWindow;
	
	string $menuBarLayout = `menuBarLayout`;
	
 			columnLayout -adj 1 mainColumnattr;		
		    text -l "点击下方按钮↓↓↓↓↓";
            button -l "访问老船@动画吧-查看工具应用视频！" -bgc 0.3 0.2 0.1 -h 30  -c "showHelp -a \"http://www.animate8.com/archives/1285\"";
            		setParent..;
 				
	paneLayout -configuration "horizontal2" -paneSize 1 100 83;	
		tabLayout;
			columnLayout -adjustableColumn true "蒙皮修型:";
				text -align "left" -label "步骤一：编辑角色pose，选择角色模型";

        		rowColumnLayout -nc 3 -cw 1 80 -cw 2 120 -cw 3 90;
				
 				text -align "left" -label "驱动关节:";
			    textField -editable false gtdriverJointTextField;
 				button -label "载入驱动关节" -command "gtloadDriverJoint;";
			    
                text -align "left" -label "FK控制器:";
			    textField -editable false gtdriverConTextField;
 				button -label "载入FK控制器" -command "gtloadDriverCon;";

			    setParent..;
 				separator -h 2;
 			
				button -label "复制雕刻模型" -command "createSculptDuplicate;";
				separator -h 2;
				string  $ofc="button -e -en 0 gtMirrorJointBut;textField -e -tx \"\" gtdriverJointSideTextField;";
				string  $onc="button -e -en 1 gtMirrorJointBut;";

				checkBox -align "center" -l "镜像(关节名称不匹配，需要载入镜像关节及控制器)" -v 1 -onc $onc -ofc $ofc gtMirrorBL;

        		rowColumnLayout -nc 3 -cw 1 80 -cw 2 120 -cw 3 90;

				text  -label "镜像驱动关节";				
			    textField -editable 0 gtdriverJointSideTextField;
			    button -label "载入镜像驱动关节" -command "gtloadMirrorDriverJoint;" gtMirrorJointBut;

				text  -label "镜像控制器";				
			    textField -editable 0 gtdriverConSideTextField;
			    button -label "载入镜像控制器" -command "gtloadMirrorDriverCon;" ;
			    
			        setParent..;			    
				text -align "center" -label "选择雕刻完成的模型.";
				
				button -label "创建蒙皮修型" -command "generateBlendshape;";
				checkBox -label "删除目标模型"  -v 1 deleteShapeCheckBox;
				separator -h 2;										
		setParent..;
		
		setParent..;
	    setParent..;	    	    
		columnLayout -adjustableColumn true;
        	rowColumnLayout -nc 3 -cw 1 80 -cw 2 120 -cw 3 90;
			text -align "left" -label "角色模型:";
			textField -editable false currentBaseMeshTextField;
			button -label "载入角色模型" -command "loadBaseMesh;";
			
	        text -align "left" "混合变形节点:";
			textField -editable false currentBlendshapeNodeTextField;	
			button -label "载入混合变形节点" -command "loadBlendshapeNode;";
 		    	 		    	    	 		    		    		    
	    setParent..;	 	    
		showWindow shapeBuilderWindow;
}

//////////////////////////////////
global proc string BSpiritCorrectiveShape() {

  string $Temp[] = `ls -sl`;
  global string $BlendDuplicate[];

  if (`size $Temp` == 2) {

    string $BaseModel = $Temp[1];
    string $BlendShape = $Temp[0];
    string $Skin = `findRelatedSkinCluster $BaseModel`;
    string $SkinResult;

    if ($Skin == "") {

      do {

        string $promptDialogResult = `promptDialog 
  
          -title "Missing SkinCluster"
          -message "Enter a valid skinCluster for the selected baseMesh"
          -button "Proceed" -button "Abort"
          -defaultButton "Proceed" -cancelButton "Abort"
          -dismissString "Abort"`;

        if ($promptDialogResult == "Proceed") {

          string $NewSkinCluster = `promptDialog -query -text`;
          
          if (`objExists $NewSkinCluster`) {

            string $SkinClusterSet = `listConnections -destination true ($NewSkinCluster + ".usedBy[0]")`;
            string $QueryBaseModel = `listConnections -source true ($SkinClusterSet + ".instObjGroups[0].objectGroups[0]")`;

            if ($QueryBaseModel == $BaseModel)
              $SkinResult = "Proceed";      
          }
        }

        else 
          $SkinResult = "Abort";  

      } while (($SkinResult != "Abort") && ($SkinResult != "Proceed"));
    }
    else $SkinResult = "Proceed";

    if ($SkinResult == "Proceed") {

      float $Progress = 0.0; 
      float $BaseTempOffset[] = `getAttr ($BaseModel+".translate")`;
      float $BlendTempOffset[] = `getAttr ($BlendShape+".translate")`;
      float $Offset[3];
      float $targetPosArray[];
      float $absPosArray[];
      float $relPosArray[];

      $Offset[0] = $BlendTempOffset[0] - $BaseTempOffset[0];
      $Offset[1] = $BlendTempOffset[1] - $BaseTempOffset[1];
      $Offset[2] = $BlendTempOffset[2] - $BaseTempOffset[2];

      int $vertexNameArray[];
      int $VertexCount[] = `polyEvaluate -v $BaseModel`;
      int $BlendVertexCount[] = `polyEvaluate -v $BlendShape`;

      string $ShapeNode[] = `pickWalk -d down $BaseModel`;

      if (! `connectionInfo -isDestination ($ShapeNode[0] + ".tweakLocation")`) {

        string $TweakSet[] = `listConnections -destination true ($ShapeNode[0] + ".instObjGroups[0].objectGroups[1]")`;
        string $Tweaknode[] = `listConnections -source true ($TweakSet[0] + ".usedBy[0]")`;
        connectAttr ($Tweaknode[0] + ".vlist[0].vertex[0]") ($ShapeNode[0] + ".tweakLocation");

      }

      progressWindow

        -title "BSpirit Corrective Shape"
        -progress $Progress
        -status "Calculating VertexMovements"
        -isInterruptable true
        -min 0
        -max 100;

      if ($VertexCount[0] == $BlendVertexCount[0]) {  

        for ($i = 0; $i < $VertexCount[0]; $i++) {

          if ( `progressWindow -query -isCancelled` ) break;

          $Progress = `trunc (20.0 * $i / $VertexCount[0] + 0.5)`;
          progressWindow -e -progress $Progress;

          string $vertexName = $BlendShape + ".vtx[" + $i + "]";
          float $targetPos[] = `pointPosition -w $vertexName`;

          $vertexName = $BaseModel + ".vtx[" + $i + "]"; 
          float $Pos[] = `pointPosition -w $vertexName`;
          float $relVertexPos[] = `getAttr $vertexName`;

          $targetPos[0] -= ($Pos[0]+$Offset[0]);
          $targetPos[1] -= ($Pos[1]+$Offset[1]);
          $targetPos[2] -= ($Pos[2]+$Offset[2]); 

          if (($targetPos[0]>0.001) || ($targetPos[0]<-0.001) || ($targetPos[1]>0.001) || ($targetPos[1]<-0.001) || ($targetPos[2]>0.001) || ($targetPos[2]<-0.001)) {

            int $vertexArraySize = `size $vertexNameArray`;

            $vertexNameArray[$vertexArraySize] = $i;

            $targetPosArray[($vertexArraySize * 3)] = $targetPos[0];
            $targetPosArray[($vertexArraySize * 3 + 1)] = $targetPos[1];
            $targetPosArray[($vertexArraySize * 3 + 2)] = $targetPos[2];
  
            $absPosArray[($vertexArraySize * 3)] = $Pos[0];
            $absPosArray[($vertexArraySize * 3 + 1)] = $Pos[1];
            $absPosArray[($vertexArraySize * 3 + 2)] = $Pos[2];

            $relPosArray[($vertexArraySize * 3)] = $relVertexPos[0];
            $relPosArray[($vertexArraySize * 3 + 1)] = $relVertexPos[1];
            $relPosArray[($vertexArraySize * 3 + 2)] = $relVertexPos[2];

          }
        }

        int $vertexNameArraySize = `size $vertexNameArray`;

        progressWindow -e -status "Calculating VertexMatrix";


        for ($i = 0; $i < $vertexNameArraySize; $i++) {

          if ( `progressWindow -query -isCancelled` ) break;

          $Progress = `trunc (20.0 + 60.0 * $i / $vertexNameArraySize + 0.5)`;
          progressWindow -e -progress $Progress;

          $Pos[0] = $absPosArray[($i * 3)];
          $Pos[1] = $absPosArray[($i * 3 + 1)];
          $Pos[2] = $absPosArray[($i * 3 + 2)];

          $targetPos[0] = $targetPosArray[($i * 3)];
          $targetPos[1] = $targetPosArray[($i * 3 + 1)];
          $targetPos[2] = $targetPosArray[($i * 3 + 2)];

          $vertexName = $BaseModel + ".vtx[" + $vertexNameArray[$i] + "]";

          float $return[];
          float $denominator;
          float $tempPos[];
          float $matrixEq[];

          move -r 1 0 0 $vertexName;
          $tempPos = `pointPosition -w $vertexName`;
          $matrixEq[0]  = $tempPos[0]-$Pos[0];
          $matrixEq[4]  = $tempPos[1]-$Pos[1];
          $matrixEq[8]  = $tempPos[2]-$Pos[2];
          $matrixEq[3]  = $targetPos[0];

          move -r -1 1 0 $vertexName;
          $tempPos = `pointPosition -w $vertexName`;
          $matrixEq[1]  = $tempPos[0]-$Pos[0];
          $matrixEq[5]  = $tempPos[1]-$Pos[1];
          $matrixEq[9]  = $tempPos[2]-$Pos[2];
          $matrixEq[7]  = $targetPos[1];

          move -r 0 -1 1 $vertexName;
          $tempPos = `pointPosition -w $vertexName`;
          $matrixEq[2]  = $tempPos[0]-$Pos[0];
          $matrixEq[6]  = $tempPos[1]-$Pos[1];
          $matrixEq[10] = $tempPos[2]-$Pos[2];
          $matrixEq[11] = $targetPos[2];

          $denominator = 

          ($matrixEq[0] * (($matrixEq[5]*$matrixEq[10]) - ($matrixEq[6]*$matrixEq[9]))) - 
          ($matrixEq[1] * (($matrixEq[4]*$matrixEq[10]) - ($matrixEq[6]*$matrixEq[8]))) + 
          ($matrixEq[2] * (($matrixEq[4]*$matrixEq[9] ) - ($matrixEq[5]*$matrixEq[8])));

          if ($denominator != 0) { 

            $return[0] = 
 
            (
            ($matrixEq[3] * (($matrixEq[5]*$matrixEq[10]) - ($matrixEq[6]*$matrixEq[9]  ))) - 
            ($matrixEq[1] * (($matrixEq[7]*$matrixEq[10]) - ($matrixEq[6]*$matrixEq[11] ))) + 
            ($matrixEq[2] * (($matrixEq[7]*$matrixEq[9] ) - ($matrixEq[5]*$matrixEq[11] )))
            ) / $denominator;

            $return[1] = 
 
            (
            ($matrixEq[0] * (($matrixEq[7]*$matrixEq[10]) - ($matrixEq[6]*$matrixEq[11] ))) -
            ($matrixEq[3] * (($matrixEq[4]*$matrixEq[10]) - ($matrixEq[6]*$matrixEq[8]  ))) + 
            ($matrixEq[2] * (($matrixEq[4]*$matrixEq[11]) - ($matrixEq[7]*$matrixEq[8]  )))
            ) / $denominator;

            $return[2] =

            (
            ($matrixEq[0] * (($matrixEq[5]*$matrixEq[11]) - ($matrixEq[7]*$matrixEq[9]  ))) - 
            ($matrixEq[1] * (($matrixEq[4]*$matrixEq[11]) - ($matrixEq[7]*$matrixEq[8]  ))) + 
            ($matrixEq[3] * (($matrixEq[4]*$matrixEq[9] ) - ($matrixEq[5]*$matrixEq[8]  )))
            ) / $denominator;

            move -r $return[0] $return[1] ($return[2]-1) $vertexName;

          }
        }
  
      if (! `progressWindow -query -isCancelled` ) {
     
          global string $BlendDuplicate[];
		  setAttr ($Skin + ".envelope" ) 0;
          string $BlendDuplicated[] = `duplicate -rc -rr $BaseModel`;
		  $BlendDuplicate[0] = $BlendDuplicated[0];
          string $UnlockAttributes[] = {".tx",".ty",".tz",".rx",".ry",".rz",".sx",".sy",".sz"};
          for ($i = 0; $i < 9; $i++) {

            setAttr -lock 0 ($BlendDuplicate[0] + $UnlockAttributes[$i]);

          }
        }
  
        progressWindow -e -st "Reseting BaseMesh";

        for ($i = 0; $i < $vertexNameArraySize; $i++) {

          $Progress = `trunc (80.0 + 20.0 * $i / $vertexNameArraySize + 0.5)`;
          progressWindow -e -progress $Progress;

          setAttr ($BaseModel+".vtx["+ $vertexNameArray[$i] +"]") $relPosArray[($i*3)] $relPosArray[($i*3+1)] $relPosArray[($i*3+2)];

        }

        setAttr ($Skin + ".envelope") 1;

      }
  
      else print "BaseMesh and BlendShape should contain the same number of vertices.\n";
      progressWindow -endProgress;
    }
  }
  else 
    print "Select the blend shape and then the skinned mesh - try again. \n";
  
  return $BlendDuplicate[0];
}
//////////////////////////////////////////////////////////////////////////
//					generateBlendshape Procedure
//////////////////////////////////////////////////////////////////////////
global proc generateBlendshape()
{
	int $gtMirror=`checkBox -q -v gtMirrorBL`;
    string $currentBlendshapeNode = `textField -q -text currentBlendshapeNodeTextField`;
	string $currentBaseMesh = `textField -q -text currentBaseMeshTextField`;
	string $currentCon = `textField -q -text gtdriverConTextField`;
	string $mirrorJoint = `textField -q -text gtdriverJointSideTextField`;
    string $mirrorCon=`textField -q -tx  gtdriverConSideTextField`;

    string $currentSel[] = `ls -sl`;
	string $currentJoint = (`getAttr ($currentSel[0] + ".nameOfJoint")`);
	
	
    int $ex=`objExists $mirrorJoint`;
    if($gtMirror==1){
    if($ex==0){	 		    
		 string $tm[];
		 int $tnum=`tokenize $currentJoint "_" $tm`;
		 string $side=$tm[1]; 
		 string $sideN; 
		 string $sid; 
		 if($side=="l"){
		    $sideN=$tm[0]+"_r_"+$tm[2]; 
		    $sid="r";
		 }else if($side=="r"){
		    $sideN=$tm[0]+"_l_"+$tm[2]; 
		    $sid="l";		    		     
		 }
		 
		 if($ex==1)$sideN=$mirrorJoint;
    int $exMirror=`objExists $sideN`;
         if($exMirror==0)
		     error "找不到另一侧关节，请载入镜像关节，或者去掉勾选镜像选项";
		     }	  	
	}
	
	if (($currentBaseMesh == "") || ($currentBlendshapeNode == ""))
	{
		warning "Please load a base mesh and a blendshape node before generating a blendshape.\n";
	}else
	{
	    
	                 string $attr[]=` listAttr -k -m  ($currentBlendshapeNode)`;
					   string $attrNam="";
					   int $indexA=0;
					   for($i=2;$i<size($attr);$i++){
					       float $tempAttr=`getAttr ($currentBlendshapeNode+"."+$attr[$i])`;
					       if($tempAttr>0.9){
					           $attrNam=$attr[$i];
					           $indexA=$i;
					       }
					   }
					   					   
					    string $xyz="";
						float $rotAxis=0;
						float $x=`getAttr ($currentJoint + ".rx")`;
						float $y=`getAttr ($currentJoint + ".ry")`;
						float $z=`getAttr ($currentJoint + ".rz")`;	
                        
                        float $tempR=0;
						if(abs($x)>abs($y)){
						   $xyz=".rx";$rotAxis=$x;$tempR=$x;}
						   else
						   {$xyz=".ry";$rotAxis=$y;$tempR=$y;}      
						     
						if(abs($tempR)<abs($z)){$xyz=".rz";$rotAxis=$z;}
						    																
					  // print ($attrNam);
					  // print ($indexA);
					  // print ($rotAxis);
					  // print ($xyz);					  
		//Prepare to call the corrective shape procedure.
		//Rotate the driver joint into the shape's pose.
		setAttr ($currentJoint + ".rx") (`getAttr ($currentSel[0] + ".xRotation")`);
		setAttr ($currentJoint + ".ry") (`getAttr ($currentSel[0] + ".yRotation")`);
		setAttr ($currentJoint + ".rz") (`getAttr ($currentSel[0] + ".zRotation")`);
		
		//Add the base mesh to the current selection.
		select -tgl $currentBaseMesh;
		//Call the procedure. Store name of new shape into string.
		string $newShape = `BSpiritCorrectiveShape`;
		
		string $listOfShapesInNode[] = `listAttr -k -m $currentBlendshapeNode`;
		int $size=size($listOfShapesInNode);
		//string $n=$listOfShapesInNode[10];
		int $targetIndex = 0;
		if($indexA==0){
		while (!($listOfShapesInNode[$targetIndex] == ""))
			$targetIndex ++;
		$targetIndex--;	
		}
		else{
		    $targetIndex=$indexA-1;
		}
		
		//print $targetIndex;	
		if($attrNam!=""){	
		$newShape = `rename $newShape $attrNam`;
		}else{
		$newShape = `rename $newShape ($currentSel[0] + $targetIndex)`;
		}
		setAttr ($currentBaseMesh+".v") 1;
		
		float $boundingBoxInfo[] = `polyEvaluate -boundingBox $currentBaseMesh`;
		float $xtranslate = ($boundingBoxInfo[1] - $boundingBoxInfo[0]);
		//Move the duplicate mesh the distance of the bounding box.
		string $tm[];
		 int $tnum=`tokenize $currentJoint "_" $tm`;
		 string $side=$tm[1]; 
		 if($side=="l"||$side=="L"){
		move -r $xtranslate 0 0 $newShape;}
		else{
		   move -r (0-$xtranslate) 0 0 $newShape; 
		}
		setAttr ($newShape+".v") 1;				
		
		blendShape -edit -target $currentBaseMesh $targetIndex $newShape 1 $currentBlendshapeNode;
		print ($newShape + " was added to the " + $currentBlendshapeNode + " blendshape node.");	
		//print ($targetIndex);		
		if($indexA==0){		
		//select -r $currentCon;
		setAttr ($currentBlendshapeNode +"."+$newShape) 0;
	    setAttr ($currentJoint + ".rx") 0;
		setAttr ($currentJoint + ".ry") 0;
		setAttr ($currentJoint + ".rz") 0;
		setDrivenKeyframe -currentDriver ($currentJoint+$xyz) ($currentBlendshapeNode +"."+$newShape);
		
		setAttr ($currentJoint + ".rx") (`getAttr ($currentSel[0] + ".xRotation")`);
		setAttr ($currentJoint + ".ry") (`getAttr ($currentSel[0] + ".yRotation")`);
		setAttr ($currentJoint + ".rz") (`getAttr ($currentSel[0] + ".zRotation")`);
		setAttr ($currentBlendshapeNode +"."+$newShape) 1;
		setDrivenKeyframe -currentDriver ($currentJoint+$xyz) ($currentBlendshapeNode +"."+$newShape);

		}
		
		select -r ($newShape);
		group -n ($newShape+"BSGrp");
		setAttr ($newShape+"BSGrp.v") 0;				

///////////////////////////////////		
		if($gtMirror==1){
		 setAttr ($currentCon+$xyz) 0;
    int $ex=`objExists $mirrorJoint`;
    string $sideN; 
    string $sid; 
 			
		 string $tm[];
		 int $tnum=`tokenize $currentJoint "_" $tm`;
		 string $side=$tm[1]; 
		 if($side=="l"||$side=="L"){
		    $sideN=$tm[0]+"_r_"+$tm[2]; 
		    $sid="r";
		 }else if($side=="r"||$side=="R"){
		    $sideN=$tm[0]+"_l_"+$tm[2]; 
		    $sid="l";		    		     
		 }else{
		      $sid="lr";
		 }	 
    if($ex==1)  $sideN= $mirrorJoint; 
	
		 
		setAttr ($currentJoint + ".rx") 0;
		setAttr ($currentJoint + ".ry") 0;
		setAttr ($currentJoint + ".rz") 0;
		
		select -r $currentBaseMesh;
        duplicate -rr;
        rename ($newShape+"_"+$sid);
		string $UnlockAttributes[] = {".tx",".ty",".tz",".rx",".ry",".rz",".sx",".sy",".sz"};
		for ($i = 0; $i < 9; $i++)
		{
	     setAttr -lock 0 (($newShape+"_"+$sid) + $UnlockAttributes[$i]);
	         }
	         
	         if($sid=="r"){move -r (0-$xtranslate) 0 0 ($newShape+"_"+$sid);}
	         else {move -r ($xtranslate) 0 0 ($newShape+"_"+$sid);}
	            
      	select -r ($newShape+"_"+$sid);
        duplicate -rr;
        rename ($newShape+"_"+$sid+"dirver");      	
      	select -r ($newShape+"_"+$sid); 
      	select -add ($newShape+"_"+$sid+"dirver"); 
      	doWrapArgList "7" { "1","0","1", "2", "1", "1", "1", "0" };

      	//CreateWrap; 
      	string $shap[]=`listRelatives -s ($newShape+"_"+$sid)`;
      	$tempString=`listConnections ($shap[0]+".worldMatrix[0]")`;
		rename $tempString[0] ($newShape+"_"+$sid+"_wrap");
		setAttr ($newShape+"_"+$sid+"_wrap.exclusiveBind") 1;
        connectAttr -f ($newShape+".outMesh") ($newShape+"_"+$sid+"dirver.inMesh");
        string $baseM[]=`listConnections -d 0 -s 1 ($newShape+"_"+$sid+"_wrap.basePoints[0]")`;
     	setAttr ($baseM[0]+".scaleX") -1;
        setAttr ($newShape+"_"+$sid+"dirver.scaleX") -1;		


		 setAttr ($mirrorCon+$xyz) $rotAxis;
		           
	                 string $attr[]=` listAttr -k -m  ($currentBlendshapeNode)`;

                        string $attrNam;
					   int $indexA=0;
					   for($i=2;$i<size($attr);$i++){
					       float $tempAttr=`getAttr ($currentBlendshapeNode+"."+$attr[$i])`;
					       if($tempAttr==1){
					           $attrNam=$attr[$i];
					           $indexA=$i;
					       }
					   }
					   
					  // print ($indexA);
					  // print ($attrNam);	   
		 setAttr ($mirrorCon+$xyz) 0;

	  		int $targetIndex = 0;	
		if($indexA==0){
		while (!($attr[$targetIndex] == ""))
			$targetIndex ++;
		$targetIndex--;	
		}
		else{
		    $targetIndex=$indexA-1;
		}
				blendShape -edit -target $currentBaseMesh $targetIndex ($newShape+"_"+$sid) 1 $currentBlendshapeNode;
		//print $targetIndex;	
		//select -r $currentCon;
		    select -r ($newShape+"_"+$sid+"dirver") ($baseM[0]) ($newShape+"_"+$sid); 	
		    select -add ($newShape+"BSGrp");	
		    parent;	
 	     
		if($indexA==0){          			
        setAttr ($currentBlendshapeNode +"."+$newShape+"_"+$sid) 0;
	    setAttr ( $sideN + ".rx") 0;
		setAttr ( $sideN + ".ry") 0;
		setAttr ( $sideN + ".rz") 0;
		setDrivenKeyframe -currentDriver ($sideN+$xyz) ($currentBlendshapeNode +"."+$newShape+"_"+$sid);
		
		setAttr ($sideN + ".rx") (`getAttr ($currentSel[0] + ".xRotation")`);
		setAttr ($sideN + ".ry") (`getAttr ($currentSel[0] + ".yRotation")`);
		setAttr ($sideN + ".rz") (`getAttr ($currentSel[0] + ".zRotation")`);
		setAttr ($currentBlendshapeNode +"."+$newShape+"_"+$sid) 1;
		setDrivenKeyframe -currentDriver ($sideN+$xyz) ($currentBlendshapeNode +"."+$newShape+"_"+$sid);
		
		setAttr ( $sideN + ".rx") 0;
		setAttr ( $sideN + ".ry") 0;
		setAttr ( $sideN + ".rz") 0;   					
		    }
		}		
		delete ($currentSel[0]);		    
		
		if (`checkBox -q -v deleteShapeCheckBox`)delete ($newShape+"BSGrp");			
	}	
}
////////////////
global proc gtloadMirrorDriverCon()
{
	string $currentSelXform[] = `ls -sl`;	
	textField -edit -tx $currentSelXform[0] gtdriverConSideTextField;
	print ($currentSelXform[0] + " 已经作为控制器被载入……\n");
}
//////////////////////////////////////////////////////////////////////////
global proc editCurve()
{
	select -r `textField -q -text currentBaseMeshTextField`;
	select -addFirst `textField -q -text currentBlendshapeNodeTextField`;
	GraphEditor;
	FrameSelected;
	print "Graph Editor Loaded.";
}
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
global proc setShapeKey()
{
	if ((`textField -q -text drivenShapeTextField` == "") || (`textField -q -text driverJointTextField` == ""))
	{
		warning "No key was set. Please load a driver joint and a driven shape before setting a key.";
	}else
	{
		int $currentSelRadioButton = `radioButtonGrp -q -select jointAxisRadioButtons`;
		string $jointAxis = ".r";
		
		if ($currentSelRadioButton == 1)
			$jointAxis += "x";
		if ($currentSelRadioButton == 2)
			$jointAxis += "y";
		if ($currentSelRadioButton == 3)
			$jointAxis += "z";
		
		//Build driver name string.
		string $driver = `textField -q -text driverJointTextField`;
		$driver += $jointAxis;
		
		//Build the driven name string.
		string $driven = `textField -q -text currentBlendshapeNodeTextField`;
		$driven = ($driven + "." + `textField -q -text drivenShapeTextField`);
		
		//Find the value of the driver.
		float $driverValue = `floatSliderGrp -q -value jointSlider`;
		
		//Find the value of the driven.
		float $drivenValue = `floatSliderGrp -q -value shapePercentageSlider`;
		$drivenValue = ($drivenValue / 100);
			
		//Set driver value.	
		setAttr $driver $driverValue;
		setAttr $driven $drivenValue;
		setDrivenKeyframe -cd $driver $driven;
		
		print ("Key Set: (" + $driver + ", " + $driverValue + ") and (" + $driven + ", " + $drivenValue + ") .");
	}
}
//////////////////////////////////////////////////////////////////////////
global proc shapeSliderCommand()
{
	//Query the currently loaded shape.
	string $currentLoadedShape = `textField -q -text drivenShapeTextField`;
	//Query the current value of the shape percentage slider.
	float $currentSliderValue = `floatSliderGrp -q -value shapePercentageSlider`;
	//Query the currently loaded blendshape node.
	string $currentBlendshapeNode = `textField -q -text currentBlendshapeNodeTextField`;
	
	//Check to ensure that a shape is indeed loaded.
	if ($currentLoadedShape == "")
	{
		warning "Click on a blendshape from the list to affect it.\n";
	} else
		{
			//Set the weight of the blendshape to the value of the slider.
			setAttr ($currentBlendshapeNode + "." + $currentLoadedShape) ($currentSliderValue / 100) ;
		}	
}

//////////////////////////////////////////////////////////////////////////
global proc jointSliderCommand()
{
	string $currentLoadedJoint = `textField -q -text driverJointTextField`;
	//Query the current value of the joint slider.
	float $currentSliderValue = `floatSliderGrp -q -value jointSlider`;
	//Query the current value of the joint axis radio buttons.
	int $currentSelRadioButton = `radioButtonGrp -q -select jointAxisRadioButtons`;
	//Initialize the $jointAxis string to ".r"
	string $jointAxis = ".r";
	
	//Add the proper axis name to the $jointAxis string (.rx, .ry, .rz)
	if ($currentSelRadioButton == 1)
		$jointAxis += "x";
	if ($currentSelRadioButton == 2)
		$jointAxis += "y";
	if ($currentSelRadioButton == 3)
		$jointAxis += "z";
	
	//Check to ensure that a joint is indeed loaded.
	if ($currentLoadedJoint == "")
	{
		warning "You must load a joint for the slider to affect.\n";
	} else
		{
			//Set the value of the joint's rotation to the value of the slider.
			setAttr ($currentLoadedJoint + $jointAxis) $currentSliderValue ;
		}	
}
//////////////////////////////////////////////////////////////////////////
global proc loadDriverJoint()
{
	//Get the current selection.
	string $currentSelXform[] = `ls -sl`;
	
	//Check to ensure that the user selected a joint.
	if (`objectType $currentSelXform[0]` != "joint")
	{
		warning "You must load a joint as a driver. Please select a joint and try again.\n";
	} else
		{
			//Edit the text field to house the name of the driver joint.
			textField -edit -text $currentSelXform[0] driverJointTextField;
			//Provide some feedback for the user.
			print ($currentSelXform[0] + " was loaded as the driver joint. \n");
		}
}
//////////////////////////////////////////////////////////////////////////
global proc refreshBlendshapeList ()
{
	if (`textField -q -tx currentBlendshapeNodeTextField` == "")
	{
		warning "Blendshape list was not updated. Please load a blendshape node first. Edit>Load Active Blendshape Node. \n";
	} else
		{
			//First we must remove all of the items in the list.
			textScrollList -edit -removeAll blendShapeTextScrollList;
			//Now we find the name of the currently loaded blendshape node.
			string $currentBlendshapeNode = `textField -q -tx currentBlendshapeNodeTextField`;
			//Using the listAttr command, we can get a list of all the shapes in the node.
			string $listOfShapesInNode[] = `listAttr -k -m $currentBlendshapeNode`;
			//We intialize this string before adding to it in the loop.
			string $addShapesCommand = "textScrollList -edit "; //-append "one"
			
			//This loop adds '-append "shapeName"' for each shape in the node.
			int $i = 1;
			while ($listOfShapesInNode[$i] != "")
			{
				$addShapesCommand = ($addShapesCommand + "-append \"" + $listOfShapesInNode[$i] + "\" ");
				$i++;
			}
			
			//Add the name of the text scroll layout.
			$addShapesCommand = $addShapesCommand + "blendShapeTextScrollList;";
			//Evaluate the entire command to add names to the list.
			eval $addShapesCommand;
			//Show the 9th item to force the UI to bring up a scroll bar.
			textScrollList -edit -showIndexedItem 9 blendShapeTextScrollList;
		}
}
//////////////////////////////////////////////////////////////////////////
global proc createSculptDuplicate()
{
    string $gtDriverBn=`textField -q -tx gtdriverJointTextField`;
	string $currentSelXform[] = `ls -sl`;
	 $currentSelXform[1]=$gtDriverBn;
	
	if (`textField -q -tx currentBaseMeshTextField` == "")
	{
		warning "Duplicate not created. Please load a base mesh before creating a duplicate. Edit>Load Base Mesh.\n";
	} else
			if ($currentSelXform[0] != `textField -q -tx currentBaseMeshTextField`)
			{
				warning "Duplicate not created. Please select the currently loaded base mesh before trying to create a sculpt duplicate.\n";
			} else
				if ( ($gtDriverBn == "") || (`objectType $gtDriverBn` != "joint") )
				{
					warning "Duplicate not created. Please select the base mesh, then shift select the posed joint.\n";
				} else
					{
						string $nameOfDuplicate[] = `duplicate -rr $currentSelXform[0]`;						
						//Create a list of locked attributes.
						string $UnlockAttributes[] = {".tx",".ty",".tz",".rx",".ry",".rz",".sx",".sy",".sz"};
	          			//Unlock the transform attributes.
						for ($i = 0; $i < 9; $i++)
						{
	            			setAttr -lock 0 ($nameOfDuplicate[0] + $UnlockAttributes[$i]);
	          			}						
						setAttr ($currentSelXform[0]+".v") 0;	

						//Rename the new mesh.
						string $newName = `rename $nameOfDuplicate[0] ($nameOfDuplicate[0] + "blendShape1")`;
						addAttr -ln xRotation -at double $newName;
						addAttr -ln yRotation -at double $newName;
						addAttr -ln zRotation -at double $newName;
						addAttr -ln nameOfJoint -dt "string" $newName;
												
						string $fkCon=` textField -q -tx gtdriverConTextField`;
						int $ex=`objExists ($fkCon+".axis")`;
						if($ex==0)addAttr -ln axis -dt "string" $fkCon;
						int $ex=`objExists ($fkCon+".Rot")`;
						if($ex==0)addAttr -ln Rot -at double $fkCon;

						//Set custom attributes to house joint information.
						setAttr ($newName + ".xRotation") `getAttr ($currentSelXform[1] + ".rx")`;
						setAttr ($newName + ".yRotation") `getAttr ($currentSelXform[1] + ".ry")`;
						setAttr ($newName + ".zRotation") `getAttr ($currentSelXform[1] + ".rz")`;
						setAttr -type "string" ($newName + ".nameOfJoint") $currentSelXform[1];
						string $xyz;
						float $rotAxis;
						float $x=`getAttr ($currentSelXform[1] + ".rx")`;
						float $y=`getAttr ($currentSelXform[1] + ".ry")`;
						float $z=`getAttr ($currentSelXform[1] + ".rz")`;						
						if($x!=0&&$y==0&&$z==0){$xyz="x";$rotAxis=$x;}
						if($x==0&&$y!=0&&$z==0){$xyz="y";$rotAxis=$y;}
						if($x==0&&$y==0&&$z!=0){$xyz="z";$rotAxis=$z;}							
                        setAttr -type "string" ($fkCon + ".axis") $xyz;
                        setAttr  ($fkCon + ".Rot") $rotAxis; 											  											
					}
}
//////////////////////////////////////////////////////////////////////////
global proc loadBaseMesh()
{
	string $currentSelXform[] = `ls -sl`;
	string $currentSelShape[] = `listRelatives -shapes $currentSelXform[0]`;
	
	if ($currentSelXform[1] != "")
	{
		warning "No base mesh loaded. Please select only 1 polygonal mesh to load.\n";
	} else
		{
			if (`objectType $currentSelShape[0]` != "mesh")
			{
				warning "Base mesh must be a polygonal mesh. NURBS and SUBD surfaces are not supported.\n";
			} else
				{
					textField -edit -tx $currentSelXform[0] currentBaseMeshTextField;
					print ($currentSelXform[0] + " was loaded as the base mesh.\n");
				}
		}
}
////////////////
global proc gtloadDriverJoint()
{
	string $currentSelXform[] = `ls -sl`;	
string $type=`nodeType $currentSelXform[0]`;
if($type=="joint"){
	textField -edit -tx $currentSelXform[0] gtdriverJointTextField;
	print ($currentSelXform[0] + " 已经作为驱动关节被载入……\n");
	}
}

global proc gtloadMirrorDriverJoint()
{
	string $currentSelXform[] = `ls -sl`;	
string $type=`nodeType $currentSelXform[0]`;
if($type=="joint"){
	textField -edit -tx $currentSelXform[0] gtdriverJointSideTextField;
	print ($currentSelXform[0] + " 已经作为驱动关节被载入……\n");
	}
}

global proc gtloadDriverCon()
{
	string $currentSelXform[] = `ls -sl`;	
	textField -edit -tx $currentSelXform[0] gtdriverConTextField;
	print ($currentSelXform[0] + " 已经作为FK控制器被载入……\n");
}
//////////////////////////////////////////////////////////////////////////
global proc loadBlendshapeNode()
{
	string $currentSelXform[] = `ls -sl`;
	
	if ($currentSelXform[2] != "")
	{
		warning "Please select only one blendshape node from the channel box.\n";
	} else
		{
			if (`objectType $currentSelXform[0]` != "blendShape")
			{
				warning "Please select a blendShape node from the inputs of the channel box.\n";
			} else
				{
					textField -edit -tx $currentSelXform[0] currentBlendshapeNodeTextField;
					print ($currentSelXform[0] + " was loaded as the blendShape node.\n");
					
					if ($currentSelXform[1] != `textField -q -tx currentBaseMeshTextField`)
					{
						warning "The newly loaded blendshape node does not belong to the current base mesh. Please load the proper base mesh.\n";
					}
				}
		}
}
gtcgTkShapeBuilder;
////////////////////2017-2-22