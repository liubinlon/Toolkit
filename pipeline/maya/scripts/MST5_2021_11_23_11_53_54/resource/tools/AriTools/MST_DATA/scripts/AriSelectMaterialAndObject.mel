//--------------------------------------------------------------------------
//
// ScriptName : AriSelectMaterialAndObject
// Contents   : オブジェクトからマテリアルを、マテリアルからオブジェクトを選択。
// Author     : Ari
// Since      : 2015/11
// LastUpdate : 2019/11/24 フェースとマテリアル選択で、アサイン選択フェースを選択できるように。
//						   オプション追加。
// Help       : http://cgjishu.net/blog-entry-117.html
//
// Note       : オブジェクトのみを選択して実行するとマテリアル選択
//              マテリアルのみを選択して実行するとオブジェクト選択
//              オブジェクトとマテリアルを両方選択して実行すると
//              選択しているオブジェクト内だけでマテリアルがアサインされているオブジェクト選択
//
//
//--------------------------------------------------------------------------



proc getFaceWithMaterials(string $faceList[], string $materialList[]){
	string $selectFaceList[];
	string $matToMeshList[];
	clear $matToMeshList;
	int $i=0;
	for($mat in $materialList){
		hyperShade -objects $mat;
		string $selects[]=`ls -sl`;
		string $faceList[] = `polyListComponentConversion -tf $selects`;
		$faceList = `filterExpand -selectionMask 34 $faceList`;
		$matToMeshList = stringArrayCatenate($matToMeshList, $faceList);
	}
	for($face in $faceList){
		if(stringArrayContains($face,$matToMeshList)){
			$selectFaceList[size($selectFaceList)] = $face;
		}
	}
	select $selectFaceList;
}
proc string[] AriObjectsWithMaterials(string $objectList[],string $materialList[]){
	string $selectObjects[];
	if(!size($materialList))return $selectObjects;
	string $matToMeshList[];
	clear $matToMeshList;
	int $i=0;
	for($mat in $materialList){
		hyperShade -objects $mat;
		string $selects[]=`ls -sl`;
		$matToMeshList = stringArrayCatenate($matToMeshList, $selects);
	}
	if(size($objectList)){
		$i=0;
		string $shapeAndMeshList[];
		for($obj in $objectList){
			$shapeAndMeshList[$i]=$obj+".";
			$i++;
		}
		string $meshList[] = `listRelatives -pa -c -s $objectList`;
		$shapeAndMeshList = stringArrayCatenate($shapeAndMeshList, $meshList);
		$i=0;
		string $selectList[];
		for($matToMesh in $matToMeshList){
			string $sepa[];
			tokenize $matToMesh "." $sepa;
			if(size($sepa)==1){
				for($shapeAndMesh in $shapeAndMeshList){
					if($matToMesh==$shapeAndMesh){
						$selectList[$i]=$matToMesh;
						$i++;
						break;
					}
				}
			}
			if(size($sepa)>1){
				for($shapeAndMesh in $shapeAndMeshList){
					if(startsWith($matToMesh,$shapeAndMesh)){
						$selectList[$i]=$matToMesh;
						$i++;
						break;
					}
				}
			}
		}
		return $selectList;
	}
	else{	
		return $matToMeshList;
	}
}
global proc AriSelectObjectsWithMaterials_GO(){
	string $selectList[]=`ls -sl`;
	string $objectList[]=`ls -sl -tr`;
	string $materialList[]=`ls -sl -mat`;
	string $selects[]=AriObjectsWithMaterials($objectList,$materialList);
	select $selects;
}
proc AriSelectObjectsWithMaterials(string $transformList[],string $materialList[]){
	string $selects[] = AriObjectsWithMaterials($transformList,$materialList);
	select $selects;
}
global proc AriSelectMaterialAndObject(){
	int $addGraph = true;
	if(`optionVar -exists "AriSelectMaterialAndObject_AddGraph"`)	$addGraph  = `optionVar -q "AriSelectMaterialAndObject_AddGraph"`;
	string $beforeSelect[] = `ls -sl`;
	if(size($beforeSelect)==0){
		AriSelectMaterialAndObjectOptions;
		return;
	}
	if($addGraph){
		if(!`window -ex "hyperShadePanel1Window"`)HypershadeWindow;
	}
	string $allSelectsList[]=`ls -sl`;
	string $shapeList[]     = `polyListComponentConversion $allSelectsList`;
	string $transformList[] = `ls -sl -tr`;
	string $materialList[]  = `ls -sl -mat`;
	string $faceList[] = `polyListComponentConversion -tf $allSelectsList`;
	$faceList = `filterExpand -selectionMask 34 $faceList`;
	int $shapeSize     = size($shapeList);
	int $transformSize = size($transformList);
	int $matSize       = size($materialList);
	int $faceSize      = size($faceList);
	//print ("shapeSize "+ $shapeSize+"\n");
	//print ("transformSize "+ $transformSize+"\n");
	//print ("matSize "+ $matSize+"\n");
	//print ("faceSize "+ $faceSize+"\n");
	if($shapeSize>0 && $matSize==0){
		hyperShade -smn "";
		string $matSelect[]=`ls -sl -mat`;
		select $matSelect;
		if($addGraph){
			hyperShadePanelGraphCommand("hyperShadePanel1", "addSelected");
		}
	}
	if($shapeSize==0 && $matSize>0){
		hyperShade -objects "";
	}
	if($transformSize > 0 && $matSize > 0 && $faceSize == 0){
		AriSelectObjectsWithMaterials($transformList,$materialList);
	}
	if($faceSize > 0 && $matSize > 0){
		getFaceWithMaterials($faceList, $materialList);
	}
}
